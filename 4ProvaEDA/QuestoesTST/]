import java.util.Scanner;
import java.util.ArrayList;
public class ValorMaisProximo {
    
    private Node root;
    private int size;
    private ArrayList<Integer> array;
    private ArrayList<Integer> balance;

    public static void main (String[] args) {
        Scanner sc = new Scanner(System.in);
        String[] valores = sc.nextLine().split(" ");

        ValorMaisProximo vm = new ValorMaisProximo();
        for(int i = 0; i < valores.length; i++) {
            vm.add(Integer.parseInt(valores[i]));
        }
        
        vm.balance = vm.balance();
        
        System.out.println(vm.saida());
        
    }

    public ValorMaisProximo() {
        this.size = 0;
        this.array = new ArrayList<Integer>();
    }

    public boolean isEmpty(){
        return this.root == null;
    }
    
    public ArrayList preOrder() {
        ArrayList<Integer> order = new ArrayList<Integer>();
        return preOrder(this.root, order);
    }

    private ArrayList preOrder(Node node, ArrayList<Integer> order) {
        if(node == null) {
            return order;
        }
        order.add(node.value);
        preOrder(node.left, order);
        preOrder(node.right, order);

        return order;
    }


    public void add(int elemento) {
        this.size++;
        if(isEmpty()) {
            this.root = new Node(elemento);
            return;
        
        } else {
        
            Node aux = this.root;
            while(aux != null) {
                if(elemento < aux.value) {
                    if(aux.left == null) {
                        Node novoNo = new Node(elemento);
                        aux.left = novoNo;
                        novoNo.parent = aux;
                        return;
                    }    

                aux = aux.left;
            } else {
                if(aux.right == null) {
                    Node novoNo = new Node(elemento);
                    aux.right = novoNo;
                    novoNo.parent = aux;
                    return;
                }
                aux = aux.right;
            }
        }
        
        }
    }


    public Node predecessor(Node n) {
        array.add(n.value);
        if(n == null) {
            return null;
        }

        if(n.left != null) {
            return max(n.left, array);
        }

        else {
            Node aux = n.parent;
            while(aux != null && aux.value > n.value) {
                aux = aux.parent;
            }
            return aux;
        }
    }

    public StringBuilder saida() {
        int i = 0;
        StringBuilder sb = new StringBuilder();
            while(i < array.size()) {
            sb.append(array.get(i)).append(", ").append(balance.get(i));
            i++;
        }
        return sb.toString();
    }

    public ArrayList<Integer> balance() {
        ArrayList<Integer> diferencas = new ArrayList<Integer>();
        balance(this.root, diferencas);  // Chama o m√©todo auxiliar recursivo
        return diferencas;
    }

    private void balance(Node node, ArrayList<Integer> diferencas) {
        if (node == null) {
            return;
        }

        int b = height(node.left) - height(node.right);
        diferencas.add(b);

        balance(node.left, diferencas);
        balance(node.right, diferencas);
    }

    private int height(Node n) {
        if (n == null) {
            return -1;
        }

        return 1 + Math.max(height(n.left), height(n.right));
    }



    public Node max() {
        return max(this.root, array);
    }

    private Node max(Node node, ArrayList<Integer> array) {
        array.add(node.value);
        if(node.right == null) {
            return node;
        }
       else {
            return max(node.right, array);
        }
    }

    public Node min() {
        return min(this.root);
    }

    private Node min(Node node) {
        if(node.left == null) {
            return node;
        }
        else {
            return min(node.left);
        }
    }

    public Node search(int valor, Node node) {
        if(node == null) {
            return null;
        }
        if(valor == node.value) {
            return node;
        }

        if(valor < node.value) {
            return search(valor, node.left);
        }

        else {
            return search(valor, node.right);
        }
    }

    //Questao : valor mais Proximo
    public int maisProx(int valor) {
        Node maisP = this.root;
        Node aux = this.root;

        while(aux != null) {
            if(Math.abs(valor - aux.value) < Math.abs(valor - maisP.value)) {
                maisP = aux;  
            }
            if(valor > aux.value) {
                aux = aux.right;
            } else {
                aux = aux.left;
            }
        }
        return maisP.value;   

    }
}
