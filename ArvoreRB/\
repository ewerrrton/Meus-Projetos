import java.util.ArrayList;

public class ArvoreRB {
    
    private Node root;
   


    public static void main(String[] args) {
        ArrayList<String> saida = new ArrayList<>();
        
        ArvoreRB rb = new ArvoreRB();

        int[] entradas = new int[]{10, 8, 12, 7, 9, 6};

        for(int i = 0; i < entradas.length; i++) {
            rb.add(entradas[i]);
        }

        rb.preOrdem(rb.root, saida);

        System.out.println(saida);

    }

    
   
    public void preOrdem(Node node, ArrayList<String> lista) {
        if (node != null) {
            
            lista.add("Valor: " + node.value + ", Cor: " + 
            (node.cor == Node.Color.PRETO ? "Preto" : "Vermelho"));

            preOrdem(node.left, lista);
            preOrdem(node.right, lista);
        }
    }

    public boolean isEmpty() {
        return this.root == null;

    }


    public void add(int element) {
        Node newNode = new Node(element, Node.Color.VERMELHO);
        if(isEmpty()) {
            this.root = newNode;
            this.root.cor = Color.PRETO;
            return;
        
        } else {
            Node aux = this.root;

            while(aux != null) {
                if(element < aux.value) {
                    if(aux.left == null) {
                        aux.left = newNode;
                        newNode.parent = aux;
                        corrigeArvore(newNode);
                        return;   
                     } 
                    aux = aux.left;
                
            
                } else {
                    if(aux.right == null) {
                        aux.right = newNode;
                        newNode.parent = aux;
                        corrigeArvore(newNode);
                        return;
                    
                    } 
                        aux = aux.right;
                }

            }
        }
    }

    private void recolor(Node pai, Node avo, Node tio) {
        if(pai != null && pai.cor == Node.Color.VERMELHO) {
            pai.cor = Node.Color.PRETO;
        } else {
            pai.cor = Node.Color.VERMELHO;
        }

        if(avo != null && avo.cor == Node.Color.VERMELHO) {
            avo.cor = Node.Color.PRETO;
        } else {
            avo.cor = Node.Color.VERMELHO;
        }

        if(tio != null && tio.cor == Node.Color.VERMELHO) {
            tio.cor = Node.Color.PRETO;
        } else {
            tio.cor = Node.Color.VERMELHO;
        }
           
    }

    public void recolor(Node node) {
        Node pai = node.parent;

        if(pai == pai.parent.left) {
            recolor(pai, pai.parent, pai.parent.right);
        
        } else {
            recolor(pai, pai.parent, pai.parent.left);
        }
    }

                    

    public void corrigeArvore(Node node) {
        if(node == this.root) {
            node.cor = PRETO;
            return;
        }

        if(node.parent.cor == PRETO) {
            return;
        }

        boolean tioVermelho = colorTio(node);

        if(tioVermelho) {
            recolor(node);
            corrigeArvore(node.parent.parent);
        
        } else {
            Node pai = node.parent;
            if(naEsquerda(pai)) {
                if(pai.left == node) {
                    rotacaoParaDireita(pai.parent);
                
                } else {
                    rotacaoEsquerdaDireita(pai.parent);
                }
            } else {
                if(pai.right == node) {
                    rotacaoParaEsquerda(pai.parent);
                
                } else {
                    rotacaoDireitaEsquerda(pai.parent);
                }
            }
        }
    }
         

    public boolean naEsquerda(Node node) {
        return node == node.parent.left;
    }

    public boolean colorTio(Node node) {
        Node tio;
        if(node == node.parent.left) {
            tio = node.parent.right;
        } else {
            tio = node.parent.left;
        }

        if(tio != null && tio.cor == VERMELHO) {
            return true;
        }

        return false;
    }

    public Node rotacaoParaDireita(Node pai) {
        Node novoPai = pai.left;
        pai.left = novoPai.right;

        if(novoPai.right != null) {
            novoPai.right.parent = pai;
        }
        
        novoPai.right = pai;
        novoPai.parent = pai.parent;

        if(pai == this.root) {
            this.root = novoPai;
        
        } else {
            if(pai == pai.parent.left) {
                pai.parent.left = novoPai;
            
            } else {
                pai.parent.right = novoPai;
            }
        }
        pai.parent = novoPai;
        return novoPai;
    }

     public Node rotacaoParaEsquerda(Node pai) {
        Node novoPai = pai.right;
        pai.right = novoPai.left;

        if(novoPai.left != null) {
            novoPai.left.parent = pai;
        }
        novoPai.left = pai;
        novoPai.parent = pai.parent;

        if(pai == this.root) {
            this.root = novoPai;
        }

        else {
            if(pai == pai.parent.left) {
                pai.parent.left = novoPai;
            }
            else {
                pai.parent.right = novoPai;
            }
        }
        pai.parent = novoPai;
        return novoPai;
    }



    public void rotacaoEsquerdaDireita(Node node) {
        Node filho = node.left;
        node.left = rotacaoParaEsquerda(filho);
        rotacaoParaDireita(node);
    }


    public void rotacaoDireitaEsquerda(Node node) {
        Node filho = node.right;
        node.right = rotacaoParaDireita(filho);
        rotacaoParaEsquerda(node);
    }








}
